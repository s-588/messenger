// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username, password
) VALUES(
    $1,$2
)
RETURNING user_id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT username 
FROM users 
WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var username string
	err := row.Scan(&username)
	return username, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id 
FROM users 
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
    set password = $2
WHERE user_id = $1
`

type UpdatePasswordParams struct {
	UserID   pgtype.UUID
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.UserID, arg.Password)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
    set username = $2
WHERE user_id = $1
`

type UpdateUserNameParams struct {
	UserID   pgtype.UUID
	Username string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.UserID, arg.Username)
	return err
}
