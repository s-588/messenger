// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserData = `-- name: CreateUserData :one
INSERT INTO usersData(
    user_id, first_name, last_name, email, avatar_url
) VALUES(
    $1,$2,$3,$4,$5
)
RETURNING user_id, first_name, last_name, email, avatar_url
`

type CreateUserDataParams struct {
	UserID    uuid.UUID
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) CreateUserData(ctx context.Context, arg CreateUserDataParams) (Usersdatum, error) {
	row := q.db.QueryRow(ctx, createUserData,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AvatarUrl,
	)
	var i Usersdatum
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUrl,
	)
	return i, err
}

const deleteUserDataByID = `-- name: DeleteUserDataByID :exec
DELETE FROM usersData
WHERE user_id = $1
`

func (q *Queries) DeleteUserDataByID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserDataByID, userID)
	return err
}

const getUserDataByEmail = `-- name: GetUserDataByEmail :one
SELECT user_id, first_name , last_name , avatar_url
FROM usersData 
WHERE email = $1
`

type GetUserDataByEmailRow struct {
	UserID    uuid.UUID
	FirstName string
	LastName  pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) GetUserDataByEmail(ctx context.Context, email pgtype.Text) (GetUserDataByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserDataByEmail, email)
	var i GetUserDataByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserDataByID = `-- name: GetUserDataByID :one
SELECT first_name , last_name , email , avatar_url
FROM usersData 
WHERE user_id = $1
`

type GetUserDataByIDRow struct {
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) GetUserDataByID(ctx context.Context, userID uuid.UUID) (GetUserDataByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserDataByID, userID)
	var i GetUserDataByIDRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE usersData
    set avatar_url = $2
WHERE user_id = $1
`

type UpdateUserAvatarParams struct {
	UserID    uuid.UUID
	AvatarUrl pgtype.Text
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.UserID, arg.AvatarUrl)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE usersData
    set email = $2
WHERE user_id = $1
`

type UpdateUserEmailParams struct {
	UserID uuid.UUID
	Email  pgtype.Text
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.UserID, arg.Email)
	return err
}

const updateUserFullName = `-- name: UpdateUserFullName :exec
UPDATE usersData
    set first_name = $2,
        last_name = $3
WHERE user_id = $1
`

type UpdateUserFullNameParams struct {
	UserID    uuid.UUID
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) UpdateUserFullName(ctx context.Context, arg UpdateUserFullNameParams) error {
	_, err := q.db.Exec(ctx, updateUserFullName, arg.UserID, arg.FirstName, arg.LastName)
	return err
}
