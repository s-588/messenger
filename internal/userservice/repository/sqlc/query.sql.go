// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    user_id, first_name, last_name, email, avatar_url
) VALUES(
    $1,$2,$3,$4,$5
)
RETURNING user_id, first_name, last_name, email, avatar_url
`

type CreateUserParams struct {
	UserID    pgtype.UUID
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUrl,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, first_name , last_name , avatar_url
FROM users 
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID    pgtype.UUID
	FirstName string
	LastName  pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT first_name , last_name , email , avatar_url
FROM users 
WHERE user_id = $1
`

type GetUserByIDRow struct {
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
    set avatar_url = $2
WHERE user_id = $1
`

type UpdateUserAvatarParams struct {
	UserID    pgtype.UUID
	AvatarUrl pgtype.Text
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.UserID, arg.AvatarUrl)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
    set email = $2
WHERE user_id = $1
`

type UpdateUserEmailParams struct {
	UserID pgtype.UUID
	Email  pgtype.Text
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.UserID, arg.Email)
	return err
}

const updateUserFullName = `-- name: UpdateUserFullName :exec
UPDATE users
    set first_name = $2,
        last_name = $3
WHERE user_id = $1
`

type UpdateUserFullNameParams struct {
	UserID    pgtype.UUID
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) UpdateUserFullName(ctx context.Context, arg UpdateUserFullNameParams) error {
	_, err := q.db.Exec(ctx, updateUserFullName, arg.UserID, arg.FirstName, arg.LastName)
	return err
}
