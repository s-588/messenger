// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages(
    conversation_id,sender_id, message_body, sended_at
) VALUES (
    $1, $2, $3, now()
) RETURNING message_id, conversation_id, sender_id, sended_at, message_body
`

type CreateMessageParams struct {
	ConversationID pgtype.UUID
	SenderID       pgtype.UUID
	MessageBody    pgtype.Text
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ConversationID, arg.SenderID, arg.MessageBody)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.ConversationID,
		&i.SenderID,
		&i.SendedAt,
		&i.MessageBody,
	)
	return i, err
}

const deleteMessageByID = `-- name: DeleteMessageByID :exec
DELETE FROM messages
WHERE message_id = $1
`

func (q *Queries) DeleteMessageByID(ctx context.Context, messageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessageByID, messageID)
	return err
}

const deleteMessagesBySenderID = `-- name: DeleteMessagesBySenderID :exec
DELETE FROM messages
WHERE sender_id = $1
`

func (q *Queries) DeleteMessagesBySenderID(ctx context.Context, senderID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessagesBySenderID, senderID)
	return err
}

const findMessagesByMessageBody = `-- name: FindMessagesByMessageBody :many
SELECT message_id, conversation_id, sender_id, message_body
FROM messages
WHERE to_tsvector(message_body) @@ to_tsquery($1)
ORDER BY sended_at DESC
LIMIT $2 OFFSET $3
`

type FindMessagesByMessageBodyParams struct {
	ToTsquery string
	Limit     int32
	Offset    int32
}

type FindMessagesByMessageBodyRow struct {
	MessageID      pgtype.UUID
	ConversationID pgtype.UUID
	SenderID       pgtype.UUID
	MessageBody    pgtype.Text
}

func (q *Queries) FindMessagesByMessageBody(ctx context.Context, arg FindMessagesByMessageBodyParams) ([]FindMessagesByMessageBodyRow, error) {
	rows, err := q.db.Query(ctx, findMessagesByMessageBody, arg.ToTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindMessagesByMessageBodyRow
	for rows.Next() {
		var i FindMessagesByMessageBodyRow
		if err := rows.Scan(
			&i.MessageID,
			&i.ConversationID,
			&i.SenderID,
			&i.MessageBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMessagesByConversationID = `-- name: GetAllMessagesByConversationID :many
SELECT message_id,conversation_id, message_body 
FROM messages
WHERE conversation_id = $1
ORDER BY sended_at DESC
LIMIT $2 OFFSET $3
`

type GetAllMessagesByConversationIDParams struct {
	ConversationID pgtype.UUID
	Limit          int32
	Offset         int32
}

type GetAllMessagesByConversationIDRow struct {
	MessageID      pgtype.UUID
	ConversationID pgtype.UUID
	MessageBody    pgtype.Text
}

func (q *Queries) GetAllMessagesByConversationID(ctx context.Context, arg GetAllMessagesByConversationIDParams) ([]GetAllMessagesByConversationIDRow, error) {
	rows, err := q.db.Query(ctx, getAllMessagesByConversationID, arg.ConversationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMessagesByConversationIDRow
	for rows.Next() {
		var i GetAllMessagesByConversationIDRow
		if err := rows.Scan(&i.MessageID, &i.ConversationID, &i.MessageBody); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMessagesBySenderID = `-- name: GetAllMessagesBySenderID :many
SELECT message_id,conversation_id, message_body 
FROM messages
WHERE sender_id = $1
ORDER BY sended_at DESC
LIMIT $2 OFFSET $3
`

type GetAllMessagesBySenderIDParams struct {
	SenderID pgtype.UUID
	Limit    int32
	Offset   int32
}

type GetAllMessagesBySenderIDRow struct {
	MessageID      pgtype.UUID
	ConversationID pgtype.UUID
	MessageBody    pgtype.Text
}

func (q *Queries) GetAllMessagesBySenderID(ctx context.Context, arg GetAllMessagesBySenderIDParams) ([]GetAllMessagesBySenderIDRow, error) {
	rows, err := q.db.Query(ctx, getAllMessagesBySenderID, arg.SenderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMessagesBySenderIDRow
	for rows.Next() {
		var i GetAllMessagesBySenderIDRow
		if err := rows.Scan(&i.MessageID, &i.ConversationID, &i.MessageBody); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT conversation_id, sender_id, message_body 
FROM messages
WHERE message_id = $1
`

type GetMessageByIDRow struct {
	ConversationID pgtype.UUID
	SenderID       pgtype.UUID
	MessageBody    pgtype.Text
}

func (q *Queries) GetMessageByID(ctx context.Context, messageID pgtype.UUID) (GetMessageByIDRow, error) {
	row := q.db.QueryRow(ctx, getMessageByID, messageID)
	var i GetMessageByIDRow
	err := row.Scan(&i.ConversationID, &i.SenderID, &i.MessageBody)
	return i, err
}

const updateMessageBody = `-- name: UpdateMessageBody :exec
Update messages
    set message_body = $2
WHERE message_id = $1
`

type UpdateMessageBodyParams struct {
	MessageID   pgtype.UUID
	MessageBody pgtype.Text
}

func (q *Queries) UpdateMessageBody(ctx context.Context, arg UpdateMessageBodyParams) error {
	_, err := q.db.Exec(ctx, updateMessageBody, arg.MessageID, arg.MessageBody)
	return err
}
