// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attachments.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO attachments(
    message_id, file_name, file_type, file_size, file_path
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING attachment_id, message_id, file_name, file_type, file_size, file_path
`

type CreateAttachmentParams struct {
	MessageID pgtype.UUID
	FileName  pgtype.Text
	FileType  pgtype.Text
	FileSize  pgtype.Int4
	FilePath  pgtype.Text
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRow(ctx, createAttachment,
		arg.MessageID,
		arg.FileName,
		arg.FileType,
		arg.FileSize,
		arg.FilePath,
	)
	var i Attachment
	err := row.Scan(
		&i.AttachmentID,
		&i.MessageID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FilePath,
	)
	return i, err
}

const deleteAttachmentByID = `-- name: DeleteAttachmentByID :exec
DELETE FROM attachments
WHERE attachment_id = $1
`

func (q *Queries) DeleteAttachmentByID(ctx context.Context, attachmentID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttachmentByID, attachmentID)
	return err
}

const deleteAttachmentByMessageID = `-- name: DeleteAttachmentByMessageID :exec
DELETE FROM attachments
WHERE message_id = $1
`

func (q *Queries) DeleteAttachmentByMessageID(ctx context.Context, messageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttachmentByMessageID, messageID)
	return err
}

const getAttachmentByID = `-- name: GetAttachmentByID :one
SELECT message_id, file_name, file_type, file_size, file_path
FROM attachments 
WHERE attachment_id = $1
`

type GetAttachmentByIDRow struct {
	MessageID pgtype.UUID
	FileName  pgtype.Text
	FileType  pgtype.Text
	FileSize  pgtype.Int4
	FilePath  pgtype.Text
}

func (q *Queries) GetAttachmentByID(ctx context.Context, attachmentID pgtype.UUID) (GetAttachmentByIDRow, error) {
	row := q.db.QueryRow(ctx, getAttachmentByID, attachmentID)
	var i GetAttachmentByIDRow
	err := row.Scan(
		&i.MessageID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FilePath,
	)
	return i, err
}

const getAttachmentByMessageID = `-- name: GetAttachmentByMessageID :one
SELECT attachment_id, file_name, file_type, file_size, file_path
FROM attachments 
WHERE message_id = $1
`

type GetAttachmentByMessageIDRow struct {
	AttachmentID pgtype.UUID
	FileName     pgtype.Text
	FileType     pgtype.Text
	FileSize     pgtype.Int4
	FilePath     pgtype.Text
}

func (q *Queries) GetAttachmentByMessageID(ctx context.Context, messageID pgtype.UUID) (GetAttachmentByMessageIDRow, error) {
	row := q.db.QueryRow(ctx, getAttachmentByMessageID, messageID)
	var i GetAttachmentByMessageIDRow
	err := row.Scan(
		&i.AttachmentID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FilePath,
	)
	return i, err
}
