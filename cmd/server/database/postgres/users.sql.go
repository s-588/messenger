// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username, first_name, last_name, email, avatar,registered_at
) VALUES(
    $1,$2,$3,$4,$5,$6
)
RETURNING user_id, username, password, first_name, last_name, email, avatar, registered_at
`

type CreateUserParams struct {
	Username     pgtype.Text
	FirstName    string
	LastName     pgtype.Text
	Email        pgtype.Text
	Avatar       pgtype.Text
	RegisteredAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Avatar,
		arg.RegisteredAt,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Avatar,
		&i.RegisteredAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT username ,first_name , last_name , email , avatar 
FROM users 
WHERE user_id = $1
`

type GetUserByIDRow struct {
	Username  pgtype.Text
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	Avatar    pgtype.Text
}

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, first_name , last_name , email , avatar 
FROM users 
WHERE username = $1
`

type GetUserByUsernameRow struct {
	UserID    pgtype.UUID
	FirstName string
	LastName  pgtype.Text
	Email     pgtype.Text
	Avatar    pgtype.Text
}

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const searchUsersByUsername = `-- name: SearchUsersByUsername :many
SELECT username, first_name, last_name, avatar
FROM users 
WHERE to_tsvector(username) @@ to_tsquery($1)
`

type SearchUsersByUsernameRow struct {
	Username  pgtype.Text
	FirstName string
	LastName  pgtype.Text
	Avatar    pgtype.Text
}

func (q *Queries) SearchUsersByUsername(ctx context.Context, toTsquery string) ([]SearchUsersByUsernameRow, error) {
	rows, err := q.db.Query(ctx, searchUsersByUsername, toTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchUsersByUsernameRow
	for rows.Next() {
		var i SearchUsersByUsernameRow
		if err := rows.Scan(
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
    set avatar = $2
WHERE user_id = $1
`

type UpdateUserAvatarParams struct {
	UserID pgtype.UUID
	Avatar pgtype.Text
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.UserID, arg.Avatar)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
    set email = $2
WHERE user_id = $1
`

type UpdateUserEmailParams struct {
	UserID pgtype.UUID
	Email  pgtype.Text
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.UserID, arg.Email)
	return err
}

const updateUserFullName = `-- name: UpdateUserFullName :exec
UPDATE users
    set first_name = $2,
        last_name = $3
WHERE user_id = $1
`

type UpdateUserFullNameParams struct {
	UserID    pgtype.UUID
	FirstName string
	LastName  pgtype.Text
}

func (q *Queries) UpdateUserFullName(ctx context.Context, arg UpdateUserFullNameParams) error {
	_, err := q.db.Exec(ctx, updateUserFullName, arg.UserID, arg.FirstName, arg.LastName)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
    set username = $2
WHERE user_id = $1
`

type UpdateUserNameParams struct {
	UserID   pgtype.UUID
	Username pgtype.Text
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.UserID, arg.Username)
	return err
}
