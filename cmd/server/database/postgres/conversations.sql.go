// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversations.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations(
    name, creation_date
)VALUES(
    $1, now()
)RETURNING conversation_id, name, creation_date
`

func (q *Queries) CreateConversation(ctx context.Context, name string) (Conversation, error) {
	row := q.db.QueryRow(ctx, createConversation, name)
	var i Conversation
	err := row.Scan(&i.ConversationID, &i.Name, &i.CreationDate)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations
WHERE conversation_id = $1
`

func (q *Queries) DeleteConversation(ctx context.Context, conversationID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteConversation, conversationID)
	return err
}

const getConversationsByID = `-- name: GetConversationsByID :one
SELECT name, creation_date 
FROM conversations
WHERE conversation_id = $1
`

type GetConversationsByIDRow struct {
	Name         string
	CreationDate pgtype.Timestamp
}

func (q *Queries) GetConversationsByID(ctx context.Context, conversationID pgtype.UUID) (GetConversationsByIDRow, error) {
	row := q.db.QueryRow(ctx, getConversationsByID, conversationID)
	var i GetConversationsByIDRow
	err := row.Scan(&i.Name, &i.CreationDate)
	return i, err
}

const searchConversationByName = `-- name: SearchConversationByName :many
SELECT conversation_id, name, creation_date
FROM conversations
WHERE to_tsvector(name) @@ to_tsquery($1)
`

func (q *Queries) SearchConversationByName(ctx context.Context, toTsquery string) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, searchConversationByName, toTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ConversationID, &i.Name, &i.CreationDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversationName = `-- name: UpdateConversationName :exec
UPDATE conversations
    set name = $2
WHERE conversation_id = $1
`

type UpdateConversationNameParams struct {
	ConversationID pgtype.UUID
	Name           string
}

func (q *Queries) UpdateConversationName(ctx context.Context, arg UpdateConversationNameParams) error {
	_, err := q.db.Exec(ctx, updateConversationName, arg.ConversationID, arg.Name)
	return err
}
