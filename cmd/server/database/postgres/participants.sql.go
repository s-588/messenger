// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: participants.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createParticipant = `-- name: CreateParticipant :one
INSERT INTO participants(
    conversation_id, user_id
) VALUES (
    $1, $2
) RETURNING participant_id, conversation_id, user_id
`

type CreateParticipantParams struct {
	ConversationID pgtype.UUID
	UserID         pgtype.UUID
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) (Participant, error) {
	row := q.db.QueryRow(ctx, createParticipant, arg.ConversationID, arg.UserID)
	var i Participant
	err := row.Scan(&i.ParticipantID, &i.ConversationID, &i.UserID)
	return i, err
}

const deleteParticipantByConversationID = `-- name: DeleteParticipantByConversationID :exec
DELETE FROM participants
WHERE conversation_id = $1
`

func (q *Queries) DeleteParticipantByConversationID(ctx context.Context, conversationID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteParticipantByConversationID, conversationID)
	return err
}

const deleteParticipantByID = `-- name: DeleteParticipantByID :exec
DELETE FROM participants
WHERE participant_id = $1
`

func (q *Queries) DeleteParticipantByID(ctx context.Context, participantID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteParticipantByID, participantID)
	return err
}

const deleteParticipantByUserID = `-- name: DeleteParticipantByUserID :exec
DELETE FROM participants
WHERE user_id = $1
`

func (q *Queries) DeleteParticipantByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteParticipantByUserID, userID)
	return err
}

const getAllParticipantsByConversationID = `-- name: GetAllParticipantsByConversationID :many
SELECT participant_id, user_id
FROM participants
WHERE conversation_id = $1
`

type GetAllParticipantsByConversationIDRow struct {
	ParticipantID pgtype.UUID
	UserID        pgtype.UUID
}

func (q *Queries) GetAllParticipantsByConversationID(ctx context.Context, conversationID pgtype.UUID) ([]GetAllParticipantsByConversationIDRow, error) {
	rows, err := q.db.Query(ctx, getAllParticipantsByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllParticipantsByConversationIDRow
	for rows.Next() {
		var i GetAllParticipantsByConversationIDRow
		if err := rows.Scan(&i.ParticipantID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllParticipantsByUserID = `-- name: GetAllParticipantsByUserID :many
SELECT participant_id, conversation_id 
FROM participants
WHERE user_id = $1
`

type GetAllParticipantsByUserIDRow struct {
	ParticipantID  pgtype.UUID
	ConversationID pgtype.UUID
}

func (q *Queries) GetAllParticipantsByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAllParticipantsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAllParticipantsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllParticipantsByUserIDRow
	for rows.Next() {
		var i GetAllParticipantsByUserIDRow
		if err := rows.Scan(&i.ParticipantID, &i.ConversationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipantByID = `-- name: GetParticipantByID :one
SELECT conversation_id, user_id 
FROM participants
WHERE participant_id = $1
`

type GetParticipantByIDRow struct {
	ConversationID pgtype.UUID
	UserID         pgtype.UUID
}

func (q *Queries) GetParticipantByID(ctx context.Context, participantID pgtype.UUID) (GetParticipantByIDRow, error) {
	row := q.db.QueryRow(ctx, getParticipantByID, participantID)
	var i GetParticipantByIDRow
	err := row.Scan(&i.ConversationID, &i.UserID)
	return i, err
}
